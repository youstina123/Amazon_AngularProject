// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reprository.EF;

#nullable disable

namespace Reprository.EF.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230423153309_m4")]
    partial class m4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Reprository.Core.Models.Admin", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Reprository.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("image")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Reprository.Core.Models.Book", b =>
                {
                    b.Property<int>("MainProductId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Awards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationYear")
                        .HasColumnType("date");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("MainProductId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Reprository.Core.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Reprository.Core.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MainProductId")
                        .HasColumnType("int");

                    b.Property<int>("Product_Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Reprository.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Reprository.Core.Models.Clothing", b =>
                {
                    b.Property<int>("MainProductId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ManufacturerCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Season")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SleeveStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Style")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainProductId");

                    b.ToTable("Cloths");
                });

            modelBuilder.Entity("Reprository.Core.Models.Computer", b =>
                {
                    b.Property<int>("MainProductId")
                        .HasColumnType("int");

                    b.Property<string>("CountryOfOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicsCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HDMIOutputs")
                        .HasColumnType("int");

                    b.Property<bool>("HasKeyboard")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMouse")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTouchscreen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<int>("StorageCapacity")
                        .HasColumnType("int");

                    b.Property<int>("USBPorts")
                        .HasColumnType("int");

                    b.Property<int>("WarrantyPeriod")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("MainProductId");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("Reprository.Core.Models.Customer", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<int?>("WishlistId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("WishlistId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Reprository.Core.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<int?>("MainProductId")
                        .HasColumnType("int");

                    b.Property<double>("PercentageOff")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("MainProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Reprository.Core.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("ImageSource")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Reprository.Core.Models.MainProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CartItemId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProfitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RateValue")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CartItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProfitId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandName = "Samsung",
                            Description = "jkjkljkjrijklwjejijijwkr",
                            IsDeleted = false,
                            Name = "Samsung Galaxy A03",
                            Price = 3000m,
                            Quantity = 500,
                            RateValue = 3
                        },
                        new
                        {
                            Id = 2,
                            BrandName = "Nokia",
                            Description = "jlkmmd;lqwkdoiwuiedyqhdjoweklfh",
                            IsDeleted = false,
                            Name = "Nokia C31 4G Smartphone",
                            Price = 4000m,
                            Quantity = 400,
                            RateValue = 4
                        });
                });

            modelBuilder.Entity("Reprository.Core.Models.Mobile", b =>
                {
                    b.Property<int>("MainProductId")
                        .HasColumnType("int");

                    b.Property<int>("BatteryLife")
                        .HasColumnType("int");

                    b.Property<bool>("HasBackCamera")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBluetooth")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFingerprintScanner")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFrontCamera")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNFC")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWaterproof")
                        .HasColumnType("bit");

                    b.Property<int>("NumSIMCards")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfCamera")
                        .HasColumnType("int");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<double>("ScreenSize")
                        .HasColumnType("float");

                    b.Property<int?>("Screentype")
                        .HasColumnType("int");

                    b.Property<int>("StorageCapacity")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("MainProductId");

                    b.ToTable("Mobiles");

                    b.HasData(
                        new
                        {
                            MainProductId = 1,
                            BatteryLife = 13,
                            HasBackCamera = true,
                            HasBluetooth = true,
                            HasFingerprintScanner = true,
                            HasFrontCamera = true,
                            HasNFC = true,
                            IsDeleted = false,
                            IsWaterproof = true,
                            NumSIMCards = 3,
                            NumberOfCamera = 3,
                            OperatingSystem = "ios",
                            RAM = 3,
                            ScreenSize = 6.5,
                            Screentype = 0,
                            StorageCapacity = 32,
                            Weight = 140
                        },
                        new
                        {
                            MainProductId = 2,
                            BatteryLife = 7,
                            HasBackCamera = true,
                            HasBluetooth = true,
                            HasFingerprintScanner = true,
                            HasFrontCamera = true,
                            HasNFC = true,
                            IsDeleted = false,
                            IsWaterproof = true,
                            NumSIMCards = 3,
                            NumberOfCamera = 3,
                            OperatingSystem = "ios",
                            RAM = 3,
                            ScreenSize = 6.5,
                            Screentype = 0,
                            StorageCapacity = 32,
                            Weight = 140
                        });
                });

            modelBuilder.Entity("Reprository.Core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("shippingState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Reprository.Core.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StoreId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Reprository.Core.Models.Profit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<int>("MainProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProfitDate")
                        .HasColumnType("date");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("MainProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("Profits");
                });

            modelBuilder.Entity("Reprository.Core.Models.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MainProductId")
                        .HasColumnType("int");

                    b.Property<int>("stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainProductId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Reprository.Core.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("date");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MainProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Reprository.Core.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("shoppingCarts");
                });

            modelBuilder.Entity("Reprository.Core.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("specialty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("VendorId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Reprository.Core.Models.TV", b =>
                {
                    b.Property<int>("MainProductId")
                        .HasColumnType("int");

                    b.Property<bool>("HasBluetooth")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEthernet")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHDR")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWIFI")
                        .HasColumnType("bit");

                    b.Property<bool>("Is3D")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmartTV")
                        .HasColumnType("bit");

                    b.Property<int>("NumHDMIInputs")
                        .HasColumnType("int");

                    b.Property<int>("NumUSBPorts")
                        .HasColumnType("int");

                    b.Property<int>("RefreshRate")
                        .HasColumnType("int");

                    b.Property<int>("Resolution")
                        .HasColumnType("int");

                    b.Property<double>("ScreenSize")
                        .HasColumnType("float");

                    b.HasKey("MainProductId");

                    b.ToTable("TVs");
                });

            modelBuilder.Entity("Reprository.Core.Models.Vendor", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<double>("TotalProfit")
                        .HasColumnType("float");

                    b.HasKey("ApplicationUserId");

                    b.HasIndex("StoreId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Reprository.Core.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MainProductId")
                        .HasColumnType("int");

                    b.Property<int>("Product_Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainProductId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Reprository.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Reprository.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reprository.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Reprository.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reprository.Core.Models.Admin", b =>
                {
                    b.HasOne("Reprository.Core.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Reprository.Core.Models.Book", b =>
                {
                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainProduct");
                });

            modelBuilder.Entity("Reprository.Core.Models.Brand", b =>
                {
                    b.HasOne("Reprository.Core.Models.Category", "Category")
                        .WithMany("Brands")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Reprository.Core.Models.CartItem", b =>
                {
                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId");

                    b.HasOne("Reprository.Core.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId");

                    b.Navigation("MainProduct");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Reprository.Core.Models.Category", b =>
                {
                    b.HasOne("Reprository.Core.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Reprository.Core.Models.Clothing", b =>
                {
                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainProduct");
                });

            modelBuilder.Entity("Reprository.Core.Models.Computer", b =>
                {
                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainProduct");
                });

            modelBuilder.Entity("Reprository.Core.Models.Customer", b =>
                {
                    b.HasOne("Reprository.Core.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reprository.Core.Models.ShoppingCart", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("ShoppingCartId");

                    b.HasOne("Reprository.Core.Models.Wishlist", "Wishlist")
                        .WithMany()
                        .HasForeignKey("WishlistId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("ShoppingCart");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Reprository.Core.Models.Discount", b =>
                {
                    b.HasOne("Reprository.Core.Models.Admin", "Admin")
                        .WithMany("discounts")
                        .HasForeignKey("AdminId");

                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany("Discounts")
                        .HasForeignKey("MainProductId");

                    b.HasOne("Reprository.Core.Models.Vendor", "Vendor")
                        .WithMany("discounts")
                        .HasForeignKey("VendorId");

                    b.Navigation("Admin");

                    b.Navigation("MainProduct");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Reprository.Core.Models.Image", b =>
                {
                    b.HasOne("Reprository.Core.Models.MainProduct", "product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Reprository.Core.Models.MainProduct", b =>
                {
                    b.HasOne("Reprository.Core.Models.Brand", "Brand")
                        .WithMany("MainProducts")
                        .HasForeignKey("BrandId");

                    b.HasOne("Reprository.Core.Models.CartItem", "CartItem")
                        .WithMany()
                        .HasForeignKey("CartItemId");

                    b.HasOne("Reprository.Core.Models.Category", "Category")
                        .WithMany("MainProducts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Reprository.Core.Models.Profit", "Profit")
                        .WithMany()
                        .HasForeignKey("ProfitId");

                    b.HasOne("Reprository.Core.Models.Store", "Store")
                        .WithMany("MainProduct")
                        .HasForeignKey("StoreId");

                    b.Navigation("Brand");

                    b.Navigation("CartItem");

                    b.Navigation("Category");

                    b.Navigation("Profit");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Reprository.Core.Models.Mobile", b =>
                {
                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainProduct");
                });

            modelBuilder.Entity("Reprository.Core.Models.Order", b =>
                {
                    b.HasOne("Reprository.Core.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Reprository.Core.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reprository.Core.Models.ShoppingCart", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Reprository.Core.Models.Payment", b =>
                {
                    b.HasOne("Reprository.Core.Models.Customer", "customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Reprository.Core.Models.Order", "order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("Reprository.Core.Models.Store", "store")
                        .WithMany("Payments")
                        .HasForeignKey("StoreId");

                    b.Navigation("customer");

                    b.Navigation("order");

                    b.Navigation("store");
                });

            modelBuilder.Entity("Reprository.Core.Models.Profit", b =>
                {
                    b.HasOne("Reprository.Core.Models.Admin", "Admin")
                        .WithMany("profits")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reprository.Core.Models.Vendor", "Vendor")
                        .WithMany("profits")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("MainProduct");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Reprository.Core.Models.Rate", b =>
                {
                    b.HasOne("Reprository.Core.Models.Customer", "Customer")
                        .WithMany("Rates")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany("Rates")
                        .HasForeignKey("MainProductId");

                    b.Navigation("Customer");

                    b.Navigation("MainProduct");
                });

            modelBuilder.Entity("Reprository.Core.Models.Review", b =>
                {
                    b.HasOne("Reprository.Core.Models.Customer", "customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany("Reviews")
                        .HasForeignKey("MainProductId");

                    b.Navigation("MainProduct");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Reprository.Core.Models.ShoppingCart", b =>
                {
                    b.HasOne("Reprository.Core.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Reprository.Core.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Reprository.Core.Models.Store", b =>
                {
                    b.HasOne("Reprository.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Reprository.Core.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Reprository.Core.Models.Vendor", "vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("vendor");
                });

            modelBuilder.Entity("Reprository.Core.Models.TV", b =>
                {
                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainProduct");
                });

            modelBuilder.Entity("Reprository.Core.Models.Vendor", b =>
                {
                    b.HasOne("Reprository.Core.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reprository.Core.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Reprository.Core.Models.Wishlist", b =>
                {
                    b.HasOne("Reprository.Core.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Reprository.Core.Models.MainProduct", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId");

                    b.Navigation("Customer");

                    b.Navigation("MainProduct");
                });

            modelBuilder.Entity("Reprository.Core.Models.Admin", b =>
                {
                    b.Navigation("discounts");

                    b.Navigation("profits");
                });

            modelBuilder.Entity("Reprository.Core.Models.Brand", b =>
                {
                    b.Navigation("MainProducts");
                });

            modelBuilder.Entity("Reprository.Core.Models.Category", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("MainProducts");
                });

            modelBuilder.Entity("Reprository.Core.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Rates");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Reprository.Core.Models.MainProduct", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Images");

                    b.Navigation("Rates");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Reprository.Core.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Reprository.Core.Models.Store", b =>
                {
                    b.Navigation("MainProduct");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Reprository.Core.Models.Vendor", b =>
                {
                    b.Navigation("discounts");

                    b.Navigation("profits");
                });
#pragma warning restore 612, 618
        }
    }
}
